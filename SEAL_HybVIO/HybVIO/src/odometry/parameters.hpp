/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/

// THIS FILE IS AUTOGENERATED. DO NOT EDIT DIRECTLY.
// Edit codegen/parameter_definitions files instead,

/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/
/************************ WARNING ************************/
#ifndef ODOMETRY_PARAMETERS_H_
#define ODOMETRY_PARAMETERS_H_

#include <istream>
#include <vector>
#include <Eigen/Dense>

class ParameterParser; // fwd decl

namespace odometry {

enum class TrackSampling {
    GAP,
    ALL,
    RANDOM
};
enum class OpticalFlowVisualization {
    NONE,
    PREDICT,
    COMPARE,
    FAILURES
};
enum class StereoEpipolarVisualization {
    NONE,
    TRACKED,
    DETECTED,
    FAILED
};

struct ParametersOdometry {
    bool visualUpdateEnabled;
    int visualUpdateForEveryNFrame;
    int maxVisualUpdates;
    int maxSuccessfulVisualUpdates;
    bool batchVisualUpdate;
    double batchVisualUpdateMaxSizeMultiplier;
    int trackMinFrames;
    double trackRmseThreshold;
    double trackChiTestOutlierR;
    double trackOutlierThresholdGrowthFactor;
    bool scoreVisualUpdateTracks;
    bool useLinearTriangulation;
    bool useIndependentStereoTriangulation;
    double triangulationConvergenceThreshold;
    double triangulationConvergenceR;
    double triangulationRcondThreshold;
    unsigned triangulationGaussNewtonIterations;
    double triangulationMinDist;
    double triangulationMaxDist;
    TrackSampling trackSampling;
    double randomTrackSamplingRatio;
    bool fullPointCloud;
    unsigned sampleSyncLag;
    unsigned sampleSyncFrameCount;
    unsigned sampleSyncFrameBufferSize;
    bool sampleSyncSmartFrameRateLimiter;
    int cameraTrailLength;
    int cameraTrailHanoiLength;
    int cameraTrailStridedLength;
    int cameraTrailStridedStride;
    bool cameraTrailFixedScheme;
    int hybridMapSize;
    double noiseScale;
    bool useDecayingZeroVelocityUpdate;
    bool blacklistTracks;
    double visualR;
    double augmentR;
    bool usePseudoVelocity;
    double pseudoVelocityLimit;
    double pseudoVelocityTarget;
    double pseudoVelocityR;
    double zuptR;
    double rotationZuptR;
    double initZuptR;
    bool useVisualStationarity;
    int visualStationarityFrameCountThreshold;
    double visualZuptR;
    double gravity;
    double noiseInitialPos;
    double noiseInitialOri;
    double noiseInitialVel;
    double noiseInitialPosTrail;
    double noiseInitialOriTrail;
    double noiseInitialBGA;
    double noiseInitialBAA;
    double noiseInitialBAT;
    double noiseInitialSFT;
    double noiseProcessAcc;
    double noiseProcessGyro;
    double noiseProcessBAA;
    double noiseProcessBGA;
    double noiseProcessBAARev;
    double noiseProcessBGARev;
    bool estimateImuCameraTimeShift;
    int rngSeed;
    unsigned processingQueueSize;
    std::vector<double> imuToCameraMatrix;
    std::vector<double> secondImuToCameraMatrix;
    std::vector<double> stereoCameraTranslation;
    double imuToCameraShiftSeconds;
    double secondImuToCameraShiftSeconds;
    bool resetUntilInitSucceeds;
    bool resetOnFailedTracking;
    double resetAfterTrackingFailsToInitialize;
    bool freezeOnFailedTracking;
    double goodFramesToTracking;
    double goodFramesToTrackingFailed;
    double goodFramesTimeWindowSeconds;
    int rot;
    bool allowSkippedFrames;
    bool outputCameraPose;
    bool outputJsonExtras;
    bool outputJsonPoseTrail;
    double targetOutputDelaySeconds;
    bool printVisualUpdateStats;
    ParametersOdometry();
};
struct ParametersTracker {
    double visualStationarityMovementThreshold;
    double visualStationarityScoreThreshold;
    bool predictOpticalFlow;
    bool independentStereoOpticalFlow;
    double predictOpticalFlowMinTriangulationDistance;
    float maxStereoEpipolarDistance;
    double targetFps;
    double focalLength;
    double focalLengthX;
    double focalLengthY;
    double principalPointX;
    double principalPointY;
    double secondFocalLength;
    double secondFocalLengthX;
    double secondFocalLengthY;
    double secondPrincipalPointX;
    double secondPrincipalPointY;
    bool fisheyeCamera;
    float validCameraFov;
    std::vector<double> distortionCoeffs;
    std::vector<double> secondDistortionCoeffs;
    int maxTracks;
    int maxTrackLength;
    bool useHybridRansac;
    int ransacMaxIters;
    double ransac2InliersToSkipRansac5;
    double ransac2InliersOverRansac5Needed;
    double ransac2Threshold;
    double ransac5Threshold;
    double ransac5Prob;
    double ransacMinInlierFraction;
    bool useTheiaRansac5;
    double theiaRansac5ErrorThresh;
    double theiaRansac5FailureProbability;
    int theiaRansac5MaxIterations;
    int theiaRansac5MinIterations;
    bool theiaRansac5UseMle;
    bool useRansac3;
    double ransac3ErrorThresh;
    double ransac3FailureProbability;
    int ransac3MaxIterations;
    int ransac3MinIterations;
    bool ransac3UseMle;
    bool useStereoUpright2p;
    double ransacStereoUpright2pErrorThresh;
    double ransacStereoUpright2pFailureProbability;
    int ransacStereoUpright2pMaxIterations;
    int ransacStereoUpright2pMinIterations;
    bool ransacStereoUpright2pUseMle;
    int ransacRngSeed;
    double relativeMaskRadius;
    std::string featureDetector;
    double gfttQualityLevel;
    double gfttMinDistance;
    int gfttBlockSize;
    double gfttK;
    float gfttMinResponse;
    int subPixWindowSize;
    int subPixMaxIter;
    double subPixEpsilon;
    int pyrLKMaxLevel;
    int pyrLKWindowSize;
    int pyrLKMaxIter;
    double pyrLKEpsilon;
    double pyrLKMinEigThreshold;
    int displayMaxTrackLength;
    bool useStereo;
    int leftCameraId;
    int rightCameraId;
    double partOfImageToDetectFeatures;
    bool useRectification;
    float rectificationZoom;
    bool computeDenseStereoDepth;
    bool computeStereoPointCloud;
    unsigned stereoPointCloudStride;
    OpticalFlowVisualization saveOpticalFlow;
    StereoEpipolarVisualization saveStereoEpipolar;
    bool ffmpeg;
    std::string vf;
    bool videoReaderThreads;
    bool convertVideoToGray;
    bool matchStereoIntensities;
    double matchSuccessiveIntensities;
    ParametersTracker();
};
struct ParametersSlam {
    bool useSlam;
    bool slamThread;
    unsigned maxKeypoints;
    unsigned minLoopClosureFeatureMatches;
    unsigned loopClosureRansacMinInliers;
    unsigned loopClosureRansacIterations;
    bool requireTringulationForLoopClosures;
    double loopClosureFeatureMatchLoweRatio;
    double maximumDriftMetersPerSecond;
    double maximumDriftRadiansPerSecond;
    double maximumDriftMetersPerTraveled;
    double maximumDriftRadiansPerTraveled;
    bool loopClosureRansacFixScale;
    double loopClosureInlierThreshold;
    bool applyLoopClosures;
    bool applyLocalBundleAdjustment;
    float relativeReprojectionErrorThreshold;
    float epipolarCheckThresholdDegrees;
    unsigned minObservationsForBA;
    double minMapPointCullingAge;
    unsigned minKeyframesInBA;
    unsigned minVisibleMapPointsInCurrentFrameBA;
    unsigned minVisibleMapPointsInNeighborhoodBA;
    unsigned minVisibleMapPointsInForNonKeyframeBA;
    bool nonKeyFramePoseAdjustment;
    int adjacentSpaceSize;
    int localBAProblemSize;
    int loopClosureLocalBAProblemSize;
    unsigned globalBAIterations;
    unsigned poseBAIterations;
    float odometryPriorStrengthPosition;
    float odometryPriorStrengthRotation;
    bool odometryPriorSimpleUncertainty;
    bool odometryPriorFixed;
    unsigned minNeighbourCovisiblitities;
    unsigned keyframeCandidateInterval;
    bool useFrontendSlam;
    unsigned copySlamMapEveryNSlamFrames;
    unsigned backendProcessDelay;
    bool copyPartialMapToFrontend;
    bool deterministicSlamMapCopy;
    int delayIntervalMultiplier;
    bool removeOdometryTransformZAxisTilt;
    bool useOdometryPoseTrailDelta;
    bool useVariableLengthDeltas;
    bool keyframeDecisionAlways;
    double keyframeDecisionMinIntervalSeconds;
    float keyframeDecisionCovisibilityRatio;
    float keyframeDecisionDistanceThreshold;
    float keyframeCullMaxCriticalRatio;
    bool keyframeCullEnabled;
    bool cullMapPoints;
    std::string vocabularyPath;
    float bowMinInCommonRatio;
    float bowScoreRatio;
    float minTriangulationAngleTwoObs;
    float minTriangulationAngleMultipleObs;
    bool loopClosureRigidTransform;
    bool globalBAAfterLoop;
    unsigned orbScaleLevels;
    float orbScaleFactor;
    unsigned orbInitialFastThreshold;
    unsigned orbMinFastThreshold;
    unsigned orbLkTrackLevel;
    bool orbExtraKeyPoints;
    bool useGpuImagePyramid;
    std::string slamFeatureDetector;
    int kfAsciiWidth;
    bool kfAsciiBA;
    bool kfAsciiAdjacent;
    bool printLoopCloserStats;
    bool printBaStats;
    ParametersSlam();
};

struct Parameters {
    enum VerbosityLevel {
        // SILENT = 0 // not supported yet
        VERBOSITY_INFO = 1,
        VERBOSITY_DEBUG = 2,
        VERBOSITY_EXTRA = 3
    };
    int verbosity;
    Eigen::Matrix4d imuToCamera;
    Eigen::Matrix4d secondImuToCamera;
    Eigen::Matrix4d imuToOutput;

    ParametersOdometry odometry;
    ParametersTracker tracker;
    ParametersSlam slam;

    Parameters(); // Default parameters
};

void setParameterString(Parameters& p, std::istream& values);
void setParsedParameters(Parameters& p, ParameterParser& parser);

} // namespace odometry

#endif
